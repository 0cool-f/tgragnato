package pilsung_test

import (
	"reflect"
	"testing"

	"github.com/tgragnato/pilsung"
)

func TestEncrypt(t *testing.T) {
	tests := []struct {
		Name  string
		Input [16]byte
		Key   []byte
		Want  [16]byte
	}{
		{
			Name: "Kryptos Logic Expected Value",
			Input: [16]byte{
				0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
				0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
			},
			Key: []byte{
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
				0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
				0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
				0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25,
			},
			Want: [16]byte{
				0x00, 0x00, 0x00, 0x00, 0x1D, 0x81, 0x0a, 0x06,
				0x20, 0x53, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.Name, func(t *testing.T) {
			if got := pilsung.Encrypt(tt.Input, tt.Key); !reflect.DeepEqual(got, tt.Want) {
				t.Errorf("Encrypt() = %v, want %v", got, tt.Want)
			}
		})
	}
}
